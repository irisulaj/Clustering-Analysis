import java.awt.BasicStroke;
import java.awt.Color;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.annotations.XYLineAnnotation;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author iri_s
 */
public class StudentInfoInput extends javax.swing.JFrame {

    /**
     * Creates new form StudentInfoInput
     */
    public StudentInfoInput() {
        initComponents();
    }
ChartPanel panel1;
ChartPanel panel2;
ChartPanel panel3;
ChartPanel panel4;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        StudentPanel = new javax.swing.JPanel();
        lblStudent = new javax.swing.JLabel();
        lblStudentId = new javax.swing.JLabel();
        lblStudentName = new javax.swing.JLabel();
        lblStudentHours = new javax.swing.JLabel();
        lblStudentGrades = new javax.swing.JLabel();
        txtStudentId = new javax.swing.JTextField();
        txtStudentName = new javax.swing.JTextField();
        txtStudentHours = new javax.swing.JTextField();
        txtStudentGrades = new javax.swing.JTextField();
        StudentPane = new javax.swing.JScrollPane();
        StudentTable = new javax.swing.JTable();
        btnAddStudent = new javax.swing.JButton();
        btnCancelStudent = new javax.swing.JButton();
        btnUpdateStudent = new javax.swing.JButton();
        btnDeleteStudent = new javax.swing.JButton();
        errorMsgSt = new javax.swing.JLabel();
        GraphPanel = new javax.swing.JPanel();
        btnShowGraph1 = new javax.swing.JButton();
        btnShowGraph2 = new javax.swing.JButton();
        btnShowGraph3 = new javax.swing.JButton();
        btnShowGraph4 = new javax.swing.JButton();
        legend = new javax.swing.JLabel();
        txtEnterHours = new javax.swing.JTextField();
        btnCalculate = new javax.swing.JButton();
        lblShowGrades = new javax.swing.JLabel();
        studentMenu = new javax.swing.JMenuBar();
        Menu1 = new javax.swing.JMenu();
        ManageStudent = new javax.swing.JMenuItem();
        Menu3 = new javax.swing.JMenu();
        ManageGraph = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Student Form\n");
        setResizable(false);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        getContentPane().setLayout(new java.awt.CardLayout());

        StudentPanel.setBackground(new java.awt.Color(255, 255, 255));

        lblStudent.setBackground(new java.awt.Color(204, 204, 255));
        lblStudent.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        lblStudent.setForeground(new java.awt.Color(0, 153, 51));
        lblStudent.setText("Student Form");

        lblStudentId.setBackground(new java.awt.Color(204, 204, 255));
        lblStudentId.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblStudentId.setForeground(new java.awt.Color(0, 153, 51));
        lblStudentId.setText("Student ID");

        lblStudentName.setBackground(new java.awt.Color(204, 204, 255));
        lblStudentName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblStudentName.setForeground(new java.awt.Color(0, 153, 51));
        lblStudentName.setText("Name");

        lblStudentHours.setBackground(new java.awt.Color(204, 204, 255));
        lblStudentHours.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblStudentHours.setForeground(new java.awt.Color(0, 153, 51));
        lblStudentHours.setText("Hours of Study");

        lblStudentGrades.setBackground(new java.awt.Color(204, 204, 255));
        lblStudentGrades.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblStudentGrades.setForeground(new java.awt.Color(0, 153, 51));
        lblStudentGrades.setText("Grades");

        txtStudentId.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        txtStudentName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        txtStudentHours.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        txtStudentGrades.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        StudentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Hours", "Grades"
            }
        ));
        StudentTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                StudentTableMouseClicked(evt);
            }
        });
        StudentPane.setViewportView(StudentTable);

        btnAddStudent.setBackground(new java.awt.Color(0, 153, 51));
        btnAddStudent.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnAddStudent.setForeground(new java.awt.Color(255, 255, 255));
        btnAddStudent.setText("Add");
        btnAddStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddStudentActionPerformed(evt);
            }
        });

        btnCancelStudent.setBackground(new java.awt.Color(0, 153, 51));
        btnCancelStudent.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnCancelStudent.setForeground(new java.awt.Color(255, 255, 255));
        btnCancelStudent.setText("Cancel");
        btnCancelStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelStudentActionPerformed(evt);
            }
        });

        btnUpdateStudent.setBackground(new java.awt.Color(0, 153, 51));
        btnUpdateStudent.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnUpdateStudent.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdateStudent.setText("Update");
        btnUpdateStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateStudentActionPerformed(evt);
            }
        });

        btnDeleteStudent.setBackground(new java.awt.Color(0, 153, 51));
        btnDeleteStudent.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnDeleteStudent.setForeground(new java.awt.Color(255, 255, 255));
        btnDeleteStudent.setText("Delete");
        btnDeleteStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteStudentActionPerformed(evt);
            }
        });

        errorMsgSt.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        errorMsgSt.setForeground(new java.awt.Color(255, 0, 0));

        javax.swing.GroupLayout StudentPanelLayout = new javax.swing.GroupLayout(StudentPanel);
        StudentPanel.setLayout(StudentPanelLayout);
        StudentPanelLayout.setHorizontalGroup(
            StudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(StudentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(StudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, StudentPanelLayout.createSequentialGroup()
                        .addGroup(StudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblStudentHours)
                            .addComponent(lblStudentGrades))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(StudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtStudentHours, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                            .addComponent(txtStudentGrades)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, StudentPanelLayout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(btnAddStudent)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 129, Short.MAX_VALUE)
                        .addComponent(btnCancelStudent))
                    .addGroup(StudentPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(StudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblStudentId, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblStudentName, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(26, 26, 26)
                        .addGroup(StudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtStudentName, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                            .addComponent(txtStudentId))))
                .addGroup(StudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(StudentPanelLayout.createSequentialGroup()
                        .addGap(152, 152, 152)
                        .addComponent(btnUpdateStudent)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDeleteStudent)
                        .addGap(56, 56, 56))
                    .addGroup(StudentPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(StudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(StudentPane, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(errorMsgSt, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblStudent))
                        .addContainerGap(87, Short.MAX_VALUE))))
        );
        StudentPanelLayout.setVerticalGroup(
            StudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(StudentPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblStudent)
                .addGap(51, 51, 51)
                .addGroup(StudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(StudentPanelLayout.createSequentialGroup()
                        .addGroup(StudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblStudentId)
                            .addComponent(txtStudentId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(StudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblStudentName)
                            .addComponent(txtStudentName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(StudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblStudentHours)
                            .addComponent(txtStudentHours, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(StudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtStudentGrades, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblStudentGrades)))
                    .addComponent(StudentPane, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41)
                .addComponent(errorMsgSt, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addGroup(StudentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddStudent)
                    .addComponent(btnCancelStudent)
                    .addComponent(btnUpdateStudent)
                    .addComponent(btnDeleteStudent))
                .addContainerGap(57, Short.MAX_VALUE))
        );

        getContentPane().add(StudentPanel, "card2");

        GraphPanel.setBackground(new java.awt.Color(255, 255, 255));

        btnShowGraph1.setBackground(new java.awt.Color(102, 255, 204));
        btnShowGraph1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnShowGraph1.setText("Show Graph 1");
        btnShowGraph1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowGraph1ActionPerformed(evt);
            }
        });

        btnShowGraph2.setBackground(new java.awt.Color(51, 255, 102));
        btnShowGraph2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnShowGraph2.setText("Show Graph 2");
        btnShowGraph2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowGraph2ActionPerformed(evt);
            }
        });

        btnShowGraph3.setBackground(new java.awt.Color(255, 255, 102));
        btnShowGraph3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnShowGraph3.setText("Show Graph 3");
        btnShowGraph3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowGraph3ActionPerformed(evt);
            }
        });

        btnShowGraph4.setBackground(new java.awt.Color(204, 204, 255));
        btnShowGraph4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnShowGraph4.setText("Show Graph 4");
        btnShowGraph4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowGraph4ActionPerformed(evt);
            }
        });

        legend.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        txtEnterHours.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        btnCalculate.setBackground(new java.awt.Color(0, 153, 51));
        btnCalculate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnCalculate.setForeground(new java.awt.Color(255, 255, 255));
        btnCalculate.setText("Calculate");
        btnCalculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalculateActionPerformed(evt);
            }
        });

        lblShowGrades.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        javax.swing.GroupLayout GraphPanelLayout = new javax.swing.GroupLayout(GraphPanel);
        GraphPanel.setLayout(GraphPanelLayout);
        GraphPanelLayout.setHorizontalGroup(
            GraphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GraphPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(GraphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(GraphPanelLayout.createSequentialGroup()
                        .addGroup(GraphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnCalculate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtEnterHours)
                            .addComponent(btnShowGraph1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnShowGraph2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnShowGraph3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnShowGraph4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 653, Short.MAX_VALUE)
                        .addComponent(legend, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(GraphPanelLayout.createSequentialGroup()
                        .addComponent(lblShowGrades, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        GraphPanelLayout.setVerticalGroup(
            GraphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GraphPanelLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(GraphPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(GraphPanelLayout.createSequentialGroup()
                        .addComponent(btnShowGraph1)
                        .addGap(40, 40, 40)
                        .addComponent(btnShowGraph2)
                        .addGap(37, 37, 37)
                        .addComponent(btnShowGraph3)
                        .addGap(41, 41, 41)
                        .addComponent(btnShowGraph4))
                    .addComponent(legend, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addComponent(lblShowGrades, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(txtEnterHours, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(btnCalculate)
                .addGap(43, 43, 43))
        );

        getContentPane().add(GraphPanel, "card4");

        Menu1.setText("Manage Students");

        ManageStudent.setText("Manage Students");
        ManageStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ManageStudentActionPerformed(evt);
            }
        });
        Menu1.add(ManageStudent);

        studentMenu.add(Menu1);

        Menu3.setText("Manage Graph");

        ManageGraph.setText("Manage Graph");
        ManageGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ManageGraphActionPerformed(evt);
            }
        });
        Menu3.add(ManageGraph);

        studentMenu.add(Menu3);

        setJMenuBar(studentMenu);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddStudentActionPerformed
         //add student    
         add_student();
    }//GEN-LAST:event_btnAddStudentActionPerformed

    private void btnCancelStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelStudentActionPerformed
        // clear input fields
           ClearInputs();
    }//GEN-LAST:event_btnCancelStudentActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // call function to show students
        show_students(); 
    }//GEN-LAST:event_formComponentShown

    private void btnUpdateStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateStudentActionPerformed
        // update students
              if(StudentTable.getSelectionModel().isSelectionEmpty()){
                  errorMsgSt.setText("Please select a student to update");
                   errorMsgSt.setVisible(true);
              }
              else{
                  //calling update students function
                    update_students();
              }
    }//GEN-LAST:event_btnUpdateStudentActionPerformed

    private void btnDeleteStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteStudentActionPerformed
        // delete student
        delete_students();
    }//GEN-LAST:event_btnDeleteStudentActionPerformed

    private void StudentTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_StudentTableMouseClicked
          // enter selected student information to respective textfields
               DefaultTableModel StudentTableModel = (DefaultTableModel) StudentTable.getModel();

               String id =  StudentTableModel.getValueAt(StudentTable.getSelectedRow(), 0).toString();
               String name =  StudentTableModel.getValueAt(StudentTable.getSelectedRow(), 1).toString();
               String hours =  StudentTableModel.getValueAt(StudentTable.getSelectedRow(), 2).toString();
               String grades =  StudentTableModel.getValueAt(StudentTable.getSelectedRow(), 3).toString();
        
               txtStudentId.setText(id);
               txtStudentName.setText(name);
               txtStudentHours.setText(hours);
               txtStudentGrades.setText(grades);
               
    }//GEN-LAST:event_StudentTableMouseClicked

    private void ManageStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ManageStudentActionPerformed
        // show student panel
        StudentPanel.setVisible(true);
        GraphPanel.setVisible(false);
    }//GEN-LAST:event_ManageStudentActionPerformed

    private void ManageGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ManageGraphActionPerformed
        // show Graph Panel
        GraphPanel.setVisible(true);
        StudentPanel.setVisible(false);
        
    }//GEN-LAST:event_ManageGraphActionPerformed

    private void btnShowGraph1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowGraph1ActionPerformed
        // show graph with data    
        try{        
            JFreeChart chart = ChartFactory.createScatterPlot("Clustering Analysis Data Only", "Hours", "Grades", createDataset(),PlotOrientation.VERTICAL,false, true, true);
            XYPlot plotxy = (XYPlot)chart.getPlot();  
            plotxy.setBackgroundPaint(new Color(255,255,255));  
            BarRenderer renderer = null;
            CategoryPlot plot = null;
            renderer = new BarRenderer();             
            panel1 = new  ChartPanel(chart);
           //panel.setLayout(new BorderLayout());        
           panel1.setVisible(true);
           if(GraphPanel.isAncestorOf(panel2)){        
           GraphPanel.remove(panel2);
           }else if(GraphPanel.isAncestorOf(panel3)){
                 GraphPanel.remove(panel3);
           }else if(GraphPanel.isAncestorOf(panel4)){
                 GraphPanel.remove(panel4);
           
           }
           
           GraphPanel.add(panel1);
         
           panel1.setSize(600,400); 
           panel1.setLocation(150, 50);
         
            legend.setText("<html><p style=\"color:#eb5934;\">(Hours, Grades)</p> </html>");
            
        } catch(Exception e){
            JOptionPane.showMessageDialog(null, "Error 453");
            e.printStackTrace();
        }             
    }//GEN-LAST:event_btnShowGraph1ActionPerformed

    private void btnShowGraph2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowGraph2ActionPerformed
        // calling linear regression       
        calculateLinearRegressionGraph();
        legend.setText("<html><p style=\"color:#eb5934;\">(Hours, Grades)</p> </br> <p style=\"color:red;\">Regression Line</p> </html>");
    }//GEN-LAST:event_btnShowGraph2ActionPerformed

    private void btnShowGraph3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowGraph3ActionPerformed
        // calling means graph
        CalculateMeansGraph();
        legend.setText("<html><p style=\"color:#eb5934;\">(Hours, Grades)</p>"
                + "</br><p style=\"color:red;\">Regression Line</p> </br><p style=\"color:#46eb34;\">Hours Mean</p>"
                + "</br><p style=\"color:blue;\">Grades Mean</p></html>");
    }//GEN-LAST:event_btnShowGraph3ActionPerformed

    private void btnShowGraph4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowGraph4ActionPerformed
        // show graph with data    
        try{       
            XYDataset dataset = ComputeCluster();
            JFreeChart chart = ChartFactory.createScatterPlot("Clustering Analysis Clusters", "Hours", "Grades", dataset,PlotOrientation.VERTICAL,false, true, true);
            XYPlot plotxy = (XYPlot)chart.getPlot();  
            plotxy.setBackgroundPaint(new Color(255,255,255)); 
     
            BarRenderer renderer = null;
            CategoryPlot plot = null;
            renderer = new BarRenderer(); 
     
            panel4 = new  ChartPanel( chart );
           //panel.setLayout(new BorderLayout());
         
           panel4.setVisible(true);
          if(GraphPanel.isAncestorOf(panel1)){        
           GraphPanel.remove(panel1);
           }else if(GraphPanel.isAncestorOf(panel2)){
                 GraphPanel.remove(panel2);
           }else if(GraphPanel.isAncestorOf(panel3)){
                 GraphPanel.remove(panel3);    
           }
          GraphPanel.add(panel4);   
         
           panel4.setSize(600,400); 
           panel4.setLocation(150, 50);
            
        } catch(Exception e){
            JOptionPane.showMessageDialog(null, "Error 453");
            e.printStackTrace();
        }     
     legend.setText("<html><p style=\"color:#eb5934;\">Centroid</p>"
                + "</br><p style=\"color:yellow;\">Cluster 1</p> </br><p style=\"color:#46eb34;\">Cluster 2</p>"
                + "</br><p style=\"color:blue;\">Cluster 3</p></html>");        
    }//GEN-LAST:event_btnShowGraph4ActionPerformed

    private void btnCalculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalculateActionPerformed
        PreparedStatement psstatement;
            ResultSet getresults;
        
        String sqlgetStudentHours = "SELECT * FROM `student`";
            int TotalHours = 0;
            int TotalGrades = 0;
            int counter = 0;
            double hoursMean = 1;
            double gradesMean = 1;
        ArrayList<Double> HoursList = new ArrayList<>();
        ArrayList<Double> GradesList = new ArrayList<>();
        try{
            psstatement= Mysql.getConnection().prepareStatement(sqlgetStudentHours);  
            getresults = psstatement.executeQuery();
            
            while(getresults.next()){
                
                    counter++;
                String hours = getresults.getString("hours");           
                int IntHours = Integer.parseInt(hours);           
                    TotalHours = TotalHours + IntHours;
                    hoursMean = TotalHours/counter;
                
                double DiffHoursMean = IntHours - hoursMean;      
                HoursList.add(DiffHoursMean);
                
                String grades = getresults.getString("grades");           
                int IntGrades = Integer.parseInt(grades);           
                    TotalGrades = TotalGrades + IntGrades;
                    gradesMean = TotalGrades/counter;
                
                 double DiffGradesMean = IntGrades - gradesMean;     
                 GradesList.add(DiffGradesMean); 
            }
            
            double sumHG = 0;
            double sumH2 = 0;
            
            for(int i=0; i<counter; i++){
                sumHG+=HoursList.get(i)*GradesList.get(i);            
                sumH2+=HoursList.get(i)*HoursList.get(i);
            }
           
            double blong = sumHG/sumH2;
            double b = Math.round(blong*100.0)/100.0;
           
            double along = gradesMean - b*hoursMean;
            double a = Math.round(along*100.0)/100.0;
             
          int x = Integer.parseInt(txtEnterHours.getText());
          double ylong = a + b*x; 
          double y = Math.round(ylong*100.0)/100.0;
            String result = "Grade is: " + String.valueOf(y);
            lblShowGrades.setText(result);
        } catch(Exception except3){
            JOptionPane.showMessageDialog(null, "Error 580");
            except3.printStackTrace();
        }
    }//GEN-LAST:event_btnCalculateActionPerformed

    //function that gets the dataset   
        public XYDataset createDataset(){  
        PreparedStatement psstatement;
        ResultSet getresults;
 
        String sqlgetStudentHours = "SELECT hours, grades FROM `student`";
              XYSeriesCollection dataset = new XYSeriesCollection();  
           //Students (hours,grades) series  
              XYSeries series1 = new XYSeries("Students");
                    int IntHours;
                    int IntGrades;              
        try{
             psstatement= Mysql.getConnection().prepareStatement(sqlgetStudentHours);  
                getresults = psstatement.executeQuery();
        while(getresults.next()){
                String hours = getresults.getString("hours");           
                    IntHours = Integer.parseInt(hours);                           
                String grades = getresults.getString("grades");           
                    IntGrades = Integer.parseInt(grades);  
                    
                    series1.add(IntHours, IntGrades); 
            }        
        } catch(Exception except){
            JOptionPane.showMessageDialog(null, "Error 504");
            except.printStackTrace();
        }
    dataset.addSeries(series1); 
    
    return dataset;
  
}
    //function that calculates regression line
        public void calculateLinearRegressionGraph(){
        
        PreparedStatement psstatement;
        ResultSet getresults;
        
        String sqlgetStudentHours = "SELECT * FROM `student`";
            int TotalHours = 0;
            int TotalGrades = 0;
            int counter = 0;
            double hoursMean = 1;
            double gradesMean = 1;
        ArrayList<Double> HoursList = new ArrayList<>();
        ArrayList<Double> GradesList = new ArrayList<>();
        try{
            psstatement= Mysql.getConnection().prepareStatement(sqlgetStudentHours);  
            getresults = psstatement.executeQuery();
            
            while(getresults.next()){
                
                    counter++;
                String hours = getresults.getString("hours");           
                int IntHours = Integer.parseInt(hours);           
                    TotalHours = TotalHours + IntHours;
                    hoursMean = TotalHours/counter;
                
                double DiffHoursMean = IntHours - hoursMean;      
                HoursList.add(DiffHoursMean);
                
                String grades = getresults.getString("grades");           
                int IntGrades = Integer.parseInt(grades);           
                    TotalGrades = TotalGrades + IntGrades;
                    gradesMean = TotalGrades/counter;
                
                 double DiffGradesMean = IntGrades - gradesMean;     
                 GradesList.add(DiffGradesMean); 
            }
            
            double sumHG = 0;
            double sumH2 = 0;
            
            for(int i=0; i<counter; i++){
                sumHG+=HoursList.get(i)*GradesList.get(i);            
                sumH2+=HoursList.get(i)*HoursList.get(i);
            }
            double b = sumHG/sumH2;
            double a = gradesMean - b*hoursMean;
           
        XYDataset dataset = createDataset();
        JFreeChart chart = ChartFactory.createScatterPlot("Clustering Analysis Regression Line", "Hours", "Grades", dataset,PlotOrientation.VERTICAL,false, true, true);
        XYPlot plotxy = (XYPlot)chart.getPlot();  
    plotxy.setBackgroundPaint(new Color(255,255,255)); 
    XYLineAnnotation LinearRegression = new XYLineAnnotation( 0.0, a, 12.0, 10.0, new BasicStroke(3.0f), Color.red);
    plotxy.addAnnotation(LinearRegression);  
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer(); 
      
      panel2 = new  ChartPanel( chart );
           //panel.setLayout(new BorderLayout());
         
           panel2.setVisible(true);
          if(GraphPanel.isAncestorOf(panel1)){        
           GraphPanel.remove(panel1);
           }else if(GraphPanel.isAncestorOf(panel3)){
                 GraphPanel.remove(panel3);
           }else if(GraphPanel.isAncestorOf(panel4)){
                 GraphPanel.remove(panel4);    
           }
          GraphPanel.add(panel2);   
         
           panel2.setSize(600,400); 
           panel2.setLocation(150, 50);
            
        } catch(Exception except3){
            JOptionPane.showMessageDialog(null, "Error 389");
            except3.printStackTrace();
        }
     
}
    //function that calculates mean
        public void CalculateMeansGraph(){ 
        PreparedStatement psstatement;
        ResultSet getresults;
        
        String sqlgetStudentHours = "SELECT * FROM `student`";
            int TotalHours = 0;
            int TotalGrades = 0;
            int counter = 0;
            double hoursMean = 1;
            double gradesMean = 1;
        ArrayList<Double> HoursList = new ArrayList<>();
        ArrayList<Double> GradesList = new ArrayList<>();
        try{
            psstatement= Mysql.getConnection().prepareStatement(sqlgetStudentHours);  
            getresults = psstatement.executeQuery();
            
            while(getresults.next()){
                
                    counter++;
                String hours = getresults.getString("hours");           
                int IntHours = Integer.parseInt(hours);           
                    TotalHours = TotalHours + IntHours;
                    hoursMean = TotalHours/counter;
                
                double DiffHoursMean = IntHours - hoursMean;      
                HoursList.add(DiffHoursMean);
                
                String grades = getresults.getString("grades");           
                int IntGrades = Integer.parseInt(grades);           
                    TotalGrades = TotalGrades + IntGrades;
                    gradesMean = TotalGrades/counter;
                
                 double DiffGradesMean = IntGrades - gradesMean;     
                 GradesList.add(DiffGradesMean); 
            }
            
            double sumHG = 0;
            double sumH2 = 0;
            
            for(int i=0; i<counter; i++){
                sumHG+=HoursList.get(i)*GradesList.get(i);            
                sumH2+=HoursList.get(i)*HoursList.get(i);
            }
            double b = sumHG/sumH2;
            double a = gradesMean - b*hoursMean;
           
        XYDataset dataset = createDataset();
        JFreeChart chart = ChartFactory.createScatterPlot("Clustering Analysis Means", "Hours", "Grades", dataset,PlotOrientation.VERTICAL,false, true, true);
        XYPlot plotxy = (XYPlot)chart.getPlot();  
    plotxy.setBackgroundPaint(new Color(255,255,255)); 
    XYLineAnnotation LinearRegression = new XYLineAnnotation( 0.0, a, 12.0, 10.0, new BasicStroke(3.0f), Color.red);
    plotxy.addAnnotation(LinearRegression);
     
    XYLineAnnotation HoursMeanLine = new XYLineAnnotation( hoursMean, 10.0, hoursMean, 0.0, new BasicStroke(3.0f), Color.green);
        plotxy.addAnnotation(HoursMeanLine);
  
    XYLineAnnotation GradesMeanLine= new XYLineAnnotation( 12.0, gradesMean, 0.0, gradesMean, new BasicStroke(3.0f), Color.blue);
        plotxy.addAnnotation(GradesMeanLine);
     
        BarRenderer renderer = null;
        CategoryPlot plot = null;
        renderer = new BarRenderer(); 
     
        panel3 = new  ChartPanel( chart );
           //panel.setLayout(new BorderLayout());
         
           panel3.setVisible(true);
          if(GraphPanel.isAncestorOf(panel1)){        
           GraphPanel.remove(panel1);
           }else if(GraphPanel.isAncestorOf(panel2)){
                 GraphPanel.remove(panel2);
           }else if(GraphPanel.isAncestorOf(panel4)){
                 GraphPanel.remove(panel4);    
           }
          GraphPanel.add(panel3);   
         
           panel3.setSize(600,400); 
           panel3.setLocation(150, 50);
            
        } catch(Exception e){
            JOptionPane.showMessageDialog(null, "Error 648");
            e.printStackTrace();
        }
     }    
    //[ublic compute data cluster
        public XYDataset ComputeCluster(){
        
        PreparedStatement psstatement;
        ResultSet getresults;
        
        String sqlgetStudentHours = "SELECT * FROM `student`";
            int counter = 0;
            
            XYSeriesCollection dataset = new XYSeriesCollection();
                XYSeries series1 = new XYSeries("Cluster1");
                XYSeries series2 = new XYSeries("Cluster2");
                XYSeries series3 = new XYSeries("Cluster3");
                XYSeries series4 = new XYSeries("Centroid");
                
        ArrayList<Integer> HoursList = new ArrayList<>();
        ArrayList<Integer> GradesList = new ArrayList<>();
                    double[][] Centroid = {
                        {1,5},
                        {5.5,7},
                       {11,9.5}};
        try{
            psstatement= Mysql.getConnection().prepareStatement(sqlgetStudentHours);  
            getresults = psstatement.executeQuery();
            
            while(getresults.next()){               
                    counter++;
                String hours = getresults.getString("hours");           
                int IntHours = Integer.parseInt(hours);           
                    HoursList.add(IntHours);   
                
                String grades = getresults.getString("grades");           
                int IntGrades = Integer.parseInt(grades);           
                    GradesList.add(IntGrades);
            }  
            for(int i=0; i<counter; i++){
                
                if(Math.abs(HoursList.get(i)) - Centroid[0][0] < 2 && Math.abs(GradesList.get(i)) - Centroid[0][1] < 2 ){           
                        
                        series1.add(HoursList.get(i), GradesList.get(i));
                }
                else if(Math.abs(HoursList.get(i)) - Centroid[1][0]<2 && Math.abs(GradesList.get(i)) - Centroid[1][1]<2 ){
                        
                        series2.add(HoursList.get(i), GradesList.get(i));
                } 
                else if (Math.abs(HoursList.get(i)) - Centroid[2][0]<2 && Math.abs(GradesList.get(i)) - Centroid[2][1]<2 ){
                   
                        series3.add(HoursList.get(i),GradesList.get(i));
                }
                
            }        
            for(int i=0;i<3;i++){              
          series4.add(Centroid[i][0], Centroid[i][1]);       
          }
        } catch(Exception except){
            JOptionPane.showMessageDialog(null, "Error 719");
            except.printStackTrace();
        }
                    dataset.addSeries(series1);
                    dataset.addSeries(series2);
                    dataset.addSeries(series3);
                    dataset.addSeries(series4);
          
    return dataset;
}
     
     
    // add students function
        public void add_student(){
    Student student = new Student();

            String id = txtStudentId.getText();
                student.setSt_id(id);
            String name = txtStudentName.getText();
                student.setName(name);
            String hours = txtStudentHours.getText();
                student.setHours(hours);
            String grades = txtStudentGrades.getText();
                student.setGrades(grades);
    
          // add employee if all input fields are not empty
         if(id.length()<=0 || name.length()<=0 || hours.length()<=0 || grades.length()<=0){
               errorMsgSt.setVisible(true);
               errorMsgSt.setText("All field inputs are required!");
         }
         else{
            //set visible false to error message
            errorMsgSt.setVisible(false);

            PreparedStatement prestate;
            String sql = "INSERT INTO `student` (`id`,`name`,`hours`,`grades`)"
                    + " VALUES (?,?,?,?)";
            try {
                prestate = Mysql.getConnection().prepareStatement(sql);

                prestate.setString(1, id);
                prestate.setString(2, name);
                prestate.setString(3, hours);
                prestate.setString(4, grades);
              
                if (prestate.executeUpdate() > 0) {

                    JOptionPane.showMessageDialog(null, "New Student Data successfully added!");
                }

            } catch (SQLException except) {
              JOptionPane.showMessageDialog(null, "Student Data could not be added!");
              except.printStackTrace();
            }
            //sapo shtohet nje punonjes i ri pastron rreshtat e vjeter dhe rishfaq te rinjte se bashku me punonjesin e shtuar
       DefaultTableModel StudentTableModel = (DefaultTableModel) StudentTable.getModel();  
       StudentTableModel.setRowCount(0);
        show_students();
            ClearInputs();
        }
    }
    //function that reads students from database
        public ArrayList<Student> StudentList() {
            
            ArrayList<Student> StudentsList = new ArrayList<>();
            
            try{               
           Statement states = Mysql.getConnection().createStatement();
            String sqlquery = "SELECT * FROM `student`";
            ResultSet getresults = states.executeQuery(sqlquery);
           Student student;
            while (getresults.next()) {
          student=new Student(getresults.getString("id"),getresults.getString("name"),
                  getresults.getString("hours"),getresults.getString("grades"));
        
      
            StudentsList.add(student);
            }   
          }
            
            catch(Exception e){
           JOptionPane.showMessageDialog(null, "Error read table data on line 326!");
           e.printStackTrace();
            }
            return StudentsList;
        } 
        
    //function that shows students from database
        public  void show_students(){
      ArrayList<Student> list = StudentList();
      DefaultTableModel StudentTableModel =(DefaultTableModel) StudentTable.getModel();
      Object [] row = new Object[4];
      for(int i=0;i<list.size(); i++){
      row[0]=list.get(i).getSt_id();
      row[1]=list.get(i).getName();
      row[2]=list.get(i).getHours();
      row[3]=list.get(i).getGrades();
      StudentTableModel.addRow(row);
      }  
    } 
        
    //function that updates students data
        public void update_students (){
        
        try{
             PreparedStatement prestate;
                   String sql ="UPDATE `student` SET  `name`=?,`hours`=?,`grades`=?"
                        + "WHERE `id`=?";
                    prestate = Mysql.getConnection().prepareStatement(sql);


                    prestate.setString(1, txtStudentName.getText());
                    prestate.setString(2, txtStudentHours.getText());
                    prestate.setString(3, txtStudentGrades.getText());
                    prestate.setString(4, txtStudentId.getText());

                    if (prestate.executeUpdate() > 0) {

                        JOptionPane.showMessageDialog(null, "Student Data successfully updated!");
                    }

                }

                catch(Exception except){
                JOptionPane.showMessageDialog(null, "Student Data could not be updated!");
                except.printStackTrace();
                }
                //as soon as student information is updated old rows are cleared and new ones are shown with updated information
                 DefaultTableModel StudentTableModel = (DefaultTableModel) StudentTable.getModel();  
                 StudentTableModel.setRowCount(0);
                 show_students();
            
                 ClearInputs();         
        }
        
    //function that deletes students
        public void delete_students(){
             //delete students
               if(StudentTable.getSelectionModel().isSelectionEmpty()){
                errorMsgSt.setText("Please select a student to delete");
                 errorMsgSt.setVisible(true);
            }
            else{
              try{
           PreparedStatement prestate;
                 String sql ="DELETE FROM `student` WHERE `id`=?";
                  prestate = Mysql.getConnection().prepareStatement(sql);
                  prestate.setString(1, txtStudentId.getText());

                  if (prestate.executeUpdate() > 0) {

                      JOptionPane.showMessageDialog(null, "Student Data Deleted Successfully!");
                  }

              }
              catch(Exception except){
              JOptionPane.showMessageDialog(null, "Student Data could not Deleted !");
              }
                 //sapo fshihet nje student pastron rreshtat e vjeter dhe rishfaq te rinjte pa studentin e hequr
         DefaultTableModel StudentTableModel = (DefaultTableModel) StudentTable.getModel();  
         StudentTableModel.setRowCount(0);
         show_students(); 
                ClearInputs();
         }
      }
       // function that clears input fields when we cancel input or after we have added a set of inputs 
        public void ClearInputs(){
                        errorMsgSt.setVisible(false);
                        txtStudentId.setText("");
                        txtStudentName.setText("");
                        txtStudentHours.setText("");
                        txtStudentGrades.setText("");
                        txtStudentId.requestFocus();    
        }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StudentInfoInput.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StudentInfoInput.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StudentInfoInput.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StudentInfoInput.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StudentInfoInput().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel GraphPanel;
    private javax.swing.JMenuItem ManageGraph;
    private javax.swing.JMenuItem ManageStudent;
    private javax.swing.JMenu Menu1;
    private javax.swing.JMenu Menu3;
    private javax.swing.JScrollPane StudentPane;
    private javax.swing.JPanel StudentPanel;
    private javax.swing.JTable StudentTable;
    private javax.swing.JButton btnAddStudent;
    private javax.swing.JButton btnCalculate;
    private javax.swing.JButton btnCancelStudent;
    private javax.swing.JButton btnDeleteStudent;
    private javax.swing.JButton btnShowGraph1;
    private javax.swing.JButton btnShowGraph2;
    private javax.swing.JButton btnShowGraph3;
    private javax.swing.JButton btnShowGraph4;
    private javax.swing.JButton btnUpdateStudent;
    private javax.swing.JLabel errorMsgSt;
    private javax.swing.JLabel lblShowGrades;
    private javax.swing.JLabel lblStudent;
    private javax.swing.JLabel lblStudentGrades;
    private javax.swing.JLabel lblStudentHours;
    private javax.swing.JLabel lblStudentId;
    private javax.swing.JLabel lblStudentName;
    private javax.swing.JLabel legend;
    private javax.swing.JMenuBar studentMenu;
    private javax.swing.JTextField txtEnterHours;
    private javax.swing.JTextField txtStudentGrades;
    private javax.swing.JTextField txtStudentHours;
    private javax.swing.JTextField txtStudentId;
    private javax.swing.JTextField txtStudentName;
    // End of variables declaration//GEN-END:variables
}
